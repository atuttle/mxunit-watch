#!/usr/bin/env node

var program = require('commander');
var mxunit = require('../mxunit');
var watchr = require('watchr');
var pkg = require('../package.json');
var fs = require("fs");
var glob = require("glob");

program
	.version(pkg.version)
	.option('-H, --host [hostname]', 'Hostname where your tests are web-accessible')
	.option('-d, --dir [directory]', 'Directory of files to watch')
	.option('-l, --list [url]', 'URL of tests listing')
	.option('-e, --extensions <list>', 'Comma separated list of extensions to watch (cfm,cfc,xml by default)', function (val) {
		return val.split(',');
	})
	.option('--debug', 'Show debug output')
	.option('--save', 'Save configuration to .mxunit-watch')
	.on("--help", function(){
		console.log("You can also create a .mxunit-watch JSON file in your watch directory to specify your project's options:");
		console.log("{");
		console.log('  "host": "localhost",');
		console.log('  "list": "http://localhost/path/to/list.cfm"');
		console.log('  "debug": true');
		console.log("}");
	})
	.parse(process.argv);

program.dir = program.dir || process.cwd() + "/";

// try to read JSON configuration in watch directory
var configFilePath = program.dir + ".mxunit-watch";
try {
	var configFileJSON = fs.readFileSync(configFilePath);
	try {
		var config = JSON.parse(configFileJSON);
		program.list = program.list || config.list;
		program.host = program.host || config.host;
		program.debug = program.debug || config.debug;
		if (program.debug){
			console.log("DEBUG: found config file at " + configFilePath);
		}
	} catch (err) {
		// most likely invalid JSON
		console.error("ERROR: Error parsing " + program.dir + ".mxunit most likely it is invalid JSON");
	}
} catch (err) {
	// no config file present
	if (program.debug) {
		console.error("ERROR: No .mxunit config file found in watch directory", program.dir);
	}
}

if (!program.list){
	console.log('ERROR: --list is required');
	process.exit(1);
}else{
	mxunit.loadList(program.list, function(loaded){
		if (!loaded){
			console.log('Unable to load the tests list. Did you enter the correct URL? (' + program.list + ')');
		}
	});
}

program.host = program.host || 'localhost';
program.extensions = program.extensions || [ "cfm", "cfc", "xml" ];

if (program.debug){
	console.log('DEBUG: Watching folder: %s', program.dir);
	console.log('DEBUG: Watching extensions: %s', program.extensions);
	console.log('DEBUG: Tests will use hostname: %s', program.host);
}

if (program.save){
	try {
		fs.writeFileSync(configFilePath, JSON.stringify({
			host: program.host,
			list: program.list,
			debug: ((program.debug) ? true : false),
			extensions: program.extensions
		}));
		if (program.debug) {
			console.log('DEBUG: Saved configuration to', configFilePath);
		}
	} catch (err) {
		console.err("ERROR: Could not save configuration to", configFilePath);
	}
}

glob("**/*.+(" + program.extensions.join("|") + ")", {}, function(err, matches){
	watchr.watch({
		paths: matches
		,listeners: {
			change: function(changeType, filePath, fileCurrentStat, filePrevStat){
				mxunit.loadList(program.list, function(loaded){
					if (loaded){
						mxunit.runAll(program.host, function(){});
					}else{
						console.log('ERROR: Unable to load tests list. Did you enter the correct URL? (' + program.list + ')');
					}
				});
			}
			,error: function(err){
				console.log('An error occured:', err);
			}
		}
		,next: function(err,watchers){
			if (err) {
				return console.log("Watching files failed with error", err);
			}
			console.log('Watching for file changes. Get coding!')
		}
	});
});
